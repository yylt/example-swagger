// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostEchoNameHandlerFunc turns a function with the right signature into a post echo name handler
type PostEchoNameHandlerFunc func(PostEchoNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostEchoNameHandlerFunc) Handle(params PostEchoNameParams) middleware.Responder {
	return fn(params)
}

// PostEchoNameHandler interface for that can handle valid post echo name params
type PostEchoNameHandler interface {
	Handle(PostEchoNameParams) middleware.Responder
}

// NewPostEchoName creates a new http.Handler for the post echo name operation
func NewPostEchoName(ctx *middleware.Context, handler PostEchoNameHandler) *PostEchoName {
	return &PostEchoName{Context: ctx, Handler: handler}
}

/*PostEchoName swagger:route POST /echo/{name} postEchoName

PostEchoName post echo name API

*/
type PostEchoName struct {
	Context *middleware.Context
	Handler PostEchoNameHandler
}

func (o *PostEchoName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostEchoNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
