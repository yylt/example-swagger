// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Foo foo
//
// swagger:model Foo
type Foo struct {

	// isadmin
	Isadmin bool `json:"isadmin,omitempty"`

	// labels
	Labels Labels `json:"labels,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// 负载类型
	// Enum: [Deployment DaemonSet StatefulSet]
	Type string `json:"type,omitempty"`
}

// Validate validates this foo
func (m *Foo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Foo) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if err := m.Labels.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("labels")
		}
		return err
	}

	return nil
}

func (m *Foo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var fooTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Deployment","DaemonSet","StatefulSet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fooTypeTypePropEnum = append(fooTypeTypePropEnum, v)
	}
}

const (

	// FooTypeDeployment captures enum value "Deployment"
	FooTypeDeployment string = "Deployment"

	// FooTypeDaemonSet captures enum value "DaemonSet"
	FooTypeDaemonSet string = "DaemonSet"

	// FooTypeStatefulSet captures enum value "StatefulSet"
	FooTypeStatefulSet string = "StatefulSet"
)

// prop value enum
func (m *Foo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fooTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Foo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Foo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Foo) UnmarshalBinary(b []byte) error {
	var res Foo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
